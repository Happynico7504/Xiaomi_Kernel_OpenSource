name: "Release Pipeline"
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: "ubuntu-latest"
    steps:
    
    - uses: "actions/checkout@v2"
    - run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
    - run: |
        sudo wget https://github.com/Happynico7504/MTK_kernel_modules/archive/refs/heads/ice-s-oss.zip > /dev/null || true
        sudo unzip ice-s-oss.zip || true
        sudo cp -r MTK_kernel_modules-ice-s-oss/* drivers/misc/nicochristmann/kernelmodules || true
        sudo wget https://github.com/Happynico7504/88x2bu-20210702/archive/refs/heads/main.zip || true
        sudo unzip main.zip || true
        sudo mkdir drivers/misc/nicochristmann/usbwifi/src || true
        sudo cp -r 88x2bu-20210702-main/* drivers/misc/nicochristmann/usbwifi/src || true
        sudo wget https://nicochristmann.net/nvidia.tar.gz > /dev/null || true
        sudo tar -xf nvidia.tar.gz || true
        sudo mkdir drivers/misc/nicochristmann/nvidiagpu || true
        sudo cp -r nvidia/* drivers/misc/nicochristmann/nvidiagpu || true
        sudo chmod 755 drivers/misc/nicochristmann/nvidiagpu/conftest.sh || true
        sudo wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-20.10.tar.xz > /dev/null && sudo xzcat clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-20.10.tar.xz | sudo tar -x && sudo apt-get update > /dev/null && sudo apt-get install -y binutils gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu build-essential git flex bison libssl-dev bc libgmp-dev libmpc-dev jq wget curl unzip > /dev/null
        sudo ls clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-20.10/bin
        sudo wget https://github.com/Happynico7504/Xiaomi_Kernel_OpenSource/releases/download/autobuild/buildcache.tar.gz > /dev/null
        sleep 15
        nproc
        sleep 15
        sudo mv buildcache/.config kernel.config
        sudo tar -xf buildcache.tar.gz
        sudo rm buildcache/.config
        sudo mv kernel.config buildcache/.config
    - run: "sudo PATH=$(pwd)/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-20.10/bin:$PATH KBUILD_OUTPUT=buildcache COMPILERSETTINGS=\"\" LINKERSETTNGS=\"-z nodefs\" ARCH=arm64 ARCH_MTK_PLATFORM=mt6761 CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 KERNEL_DIR=$(pwd) CLANG_PREBUILT_BIN=$(pwd)/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-20.10/bin LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN=/usr/bin CC=clang LD=ld.lld LLVM_LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size STRIP=llvm-strip make -j$(nproc) || true"
    - run: "sudo cp $(sudo find -iname *.ko) modules || true"
    - run: "sudo tar -c modules | gzip -9 > modules.tar.gz"
    - run: "sudo tar -c buildcache | gzip -9 > buildcache.tar.gz"
    - run: |
        sha512sum buildcache.tar.gz > buildcache.tar.gz.sha512 || true
        sha512sum modules.tar.gz > modules.tar.gz.sha512 || true
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "autobuild"
        prerelease: true
        title: "Automatic build ${{ env.SHORT_SHA }}"
        files: |
          buildcache/arch/arm64/boot/Image.gz
          buildcache/kernel/kheaders_data.tar.xz
          buildcache/System.map
          clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-20.10.tar.xz
          buildcache.tar.gz
          buildcache.tar.gz.sha512
          modules.tar.gz
          modules.tar.gz.sha512
